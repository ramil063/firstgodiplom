// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ramil063/firstgodiplom/internal/storage/db (interfaces: DataBaser)

// Package db is a generated GoMock package.
package db

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pgconn "github.com/jackc/pgconn"
	pgx "github.com/jackc/pgx/v4"
	pgxpool "github.com/jackc/pgx/v4/pgxpool"
)

// MockDataBaser is a mock of DataBaser interface.
type MockDataBaser struct {
	ctrl     *gomock.Controller
	recorder *MockDataBaserMockRecorder
}

// MockDataBaserMockRecorder is the mock recorder for MockDataBaser.
type MockDataBaserMockRecorder struct {
	mock *MockDataBaser
}

// NewMockDataBaser creates a new mock instance.
func NewMockDataBaser(ctrl *gomock.Controller) *MockDataBaser {
	mock := &MockDataBaser{ctrl: ctrl}
	mock.recorder = &MockDataBaserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataBaser) EXPECT() *MockDataBaserMockRecorder {
	return m.recorder
}

// ExecContext mocks base method.
func (m *MockDataBaser) ExecContext(arg0 context.Context, arg1 string, arg2 ...interface{}) (pgconn.CommandTag, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(pgconn.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockDataBaserMockRecorder) ExecContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockDataBaser)(nil).ExecContext), varargs...)
}

// Open mocks base method.
func (m *MockDataBaser) Open() (*pgxpool.Pool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(*pgxpool.Pool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockDataBaserMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockDataBaser)(nil).Open))
}

// PingContext mocks base method.
func (m *MockDataBaser) PingContext(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingContext", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingContext indicates an expected call of PingContext.
func (mr *MockDataBaserMockRecorder) PingContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingContext", reflect.TypeOf((*MockDataBaser)(nil).PingContext), arg0)
}

// QueryContext mocks base method.
func (m *MockDataBaser) QueryContext(arg0 context.Context, arg1 string, arg2 ...interface{}) (pgx.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(pgx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext.
func (mr *MockDataBaserMockRecorder) QueryContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockDataBaser)(nil).QueryContext), varargs...)
}

// QueryRowContext mocks base method.
func (m *MockDataBaser) QueryRowContext(arg0 context.Context, arg1 string, arg2 ...interface{}) pgx.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowContext", varargs...)
	ret0, _ := ret[0].(pgx.Row)
	return ret0
}

// QueryRowContext indicates an expected call of QueryRowContext.
func (mr *MockDataBaserMockRecorder) QueryRowContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowContext", reflect.TypeOf((*MockDataBaser)(nil).QueryRowContext), varargs...)
}

// SetPool mocks base method.
func (m *MockDataBaser) SetPool() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPool")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPool indicates an expected call of SetPool.
func (mr *MockDataBaserMockRecorder) SetPool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPool", reflect.TypeOf((*MockDataBaser)(nil).SetPool))
}

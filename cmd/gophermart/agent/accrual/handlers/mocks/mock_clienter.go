// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ramil063/firstgodiplom/cmd/gophermart/agent/accrual/handlers (interfaces: Clienter)

// Package handlers is a generated GoMock package.
package handlers

import (
	io "io"
	"log"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClienter is a mock of Clienter interface.
type MockClienter struct {
	ctrl     *gomock.Controller
	recorder *MockClienterMockRecorder
}

// MockClienterMockRecorder is the mock recorder for MockClienter.
type MockClienterMockRecorder struct {
	mock *MockClienter
}

// NewMockClienter creates a new mock instance.
func NewMockClienter(ctrl *gomock.Controller) *MockClienter {
	mock := &MockClienter{ctrl: ctrl}
	mock.recorder = &MockClienterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClienter) EXPECT() *MockClienterMockRecorder {
	return m.recorder
}

// NewRequest mocks base method.
func (m *MockClienter) NewRequest(arg0, arg1 string, arg2 []byte) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRequest indicates an expected call of NewRequest.
func (mr *MockClienterMockRecorder) NewRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRequest", reflect.TypeOf((*MockClienter)(nil).NewRequest), arg0, arg1, arg2)
}

// SendRequest mocks base method.
func (m *MockClienter) SendRequest(arg0, arg1 string, arg2 []byte) (int, io.ReadCloser, http.Header, error) {
	m.ctrl.T.Helper()
	log.Println(arg0, arg1, arg2)
	ret := m.ctrl.Call(m, "SendRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(io.ReadCloser)
	ret2, _ := ret[2].(http.Header)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// SendRequest indicates an expected call of SendRequest.
func (mr *MockClienterMockRecorder) SendRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRequest", reflect.TypeOf((*MockClienter)(nil).SendRequest), arg0, arg1, arg2)
}
